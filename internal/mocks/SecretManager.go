// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/quickube/QScaler/api/v1alpha1"
)

// SecretManager is an autogenerated mock type for the SecretManager type
type SecretManager struct {
	mock.Mock
}

// Get provides a mock function with given fields: secret
func (_m *SecretManager) Get(secret v1alpha1.ValueOrSecret) (string, error) {
	ret := _m.Called(secret)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(v1alpha1.ValueOrSecret) (string, error)); ok {
		return rf(secret)
	}
	if rf, ok := ret.Get(0).(func(v1alpha1.ValueOrSecret) string); ok {
		r0 = rf(secret)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(v1alpha1.ValueOrSecret) error); ok {
		r1 = rf(secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSecretManager creates a new instance of SecretManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecretManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecretManager {
	mock := &SecretManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
